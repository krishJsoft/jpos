package com.alpha.bo.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alpha.bo.interfaces.IProductBO;
import com.alpha.dao.interfaces.IProductDAO;
import com.alpha.hq.model.Product;
import com.alpha.hq.model.Productcategory;
import com.alpha.hq.model.Productprice;
import com.alpha.hq.model.Productsupplier;
import com.alpha.hq.model.Supplier;
import com.alpha.hq.model.Supplierdocument;
import com.alpha.model.datamodel.ProductModel;
import com.alpha.model.datamodel.ProductpriceModel;
import com.alpha.model.datamodel.ProductsupplierModel;


/*
 * @author Gopal Ar
 * @version 1.0
 * @since 9 July 2013
 * 
 */

@Service("productBO")
public class ProductBOImpl implements IProductBO {
	
	public static Logger log = LoggerFactory.getLogger(BranchBOImpl.class);

	@Resource(name = "productRepository")
	private IProductDAO productRepository;
	
	@Override
	public List<ProductModel> findByProductListAll() throws Exception {
		List<ProductModel> productObjList = new ArrayList<ProductModel>();		
		try {
		List<Product> productList = productRepository.findByProductListAll();

		for (Product product : productList) {
			
			ProductModel productObj = new ProductModel();
			productObj.setBarcode(product.getBarcode());
			productObj.setCreatedBy(product.getCreatedBy());
			productObj.setCreatedDate(product.getCreatedDate());
			productObj.setDescription(product.getDescription());
			productObj.setDiscount(product.getDiscount());
			productObj.setExpiryDate(product.getCreatedDate());
			productObj.setHeight(product.getHeight());
			productObj.setLastModifiedDate(product.getLastModifiedDate());
			productObj.setLength(product.getLength());
			productObj.setProductCode(product.getProductCode());
			productObj.setProductName(product.getProductName());
			productObj.setQuantityonHand(product.getQuantityonHand());
			productObj.setReorderPoint(product.getReorderPoint());
			productObj.setReorderQuantity(product.getReorderQuantity());
			productObj.setStatus(product.getStatus());
			productObj.setWeight(product.getWeight());
			productObj.setWidth(product.getWidth());
			productObj.setProductId(product.getProductId());				
			productObj.setNormalPrice(product.getNormalPrice());
			productObj.setPurchasePrice(product.getPurchasePrice());			
			productObj.setDoctorPrice(product.getDoctorPrice());
			productObj.setSalesrepPrice(product.getSalesrepPrice());
			productObj.setQuantityonalert(product.getQuantityonalert());		
			productObj.setCategoryId(product.getProductcategory().getCategoryId());
			productObj.setCategoryName(product.getProductcategory().getName());	
			productObj.setUom(product.getUom());
			productObj.setProductDesc(product.getProductDesc());
		
			productObjList.add(productObj);
		}
		}
		catch(Exception e)
		{
			log.info("Error in getProductList of ProductBOImpl "+ e.toString());
			throw e;
		}
		return productObjList;
	}

	@Override
	public int getProductCount(Integer categoryId, Integer supplierId,
			String barcode, String status) throws Exception {
		try {
			return productRepository.getProductCount(categoryId, supplierId, barcode, status);
		} catch (Exception e) {
			log.info("Error in getProductCount of ProductBOImpl "+ e.toString());
			throw e;
		}
	}

	@Override
	public List<ProductModel> getProductList(Integer categoryId,
			Integer supplierId, String barcode, String status, int start,
			int howMany) throws Exception {
		List<ProductModel> productObjList = new ArrayList<ProductModel>();
		List<ProductsupplierModel> supplierList = new ArrayList<ProductsupplierModel>();
		try {
		List<Product> productList = productRepository.getProductList(categoryId, supplierId, barcode, status, start, howMany);

		for (Product product : productList) {
			
			ProductModel productObj = new ProductModel();
			productObj.setBarcode(product.getBarcode());
			productObj.setCreatedBy(product.getCreatedBy());
			productObj.setCreatedDate(product.getCreatedDate());
			productObj.setDescription(product.getDescription());
			productObj.setDiscount(product.getDiscount());
			productObj.setExpiryDate(product.getCreatedDate());
			productObj.setHeight(product.getHeight());
			productObj.setLastModifiedDate(product.getLastModifiedDate());
			productObj.setLength(product.getLength());
			productObj.setProductCode(product.getProductCode());
			productObj.setProductName(product.getProductName());
			productObj.setQuantityonHand(product.getQuantityonHand());
			productObj.setReorderPoint(product.getReorderPoint());
			productObj.setReorderQuantity(product.getReorderQuantity());
			productObj.setStatus(product.getStatus());
			productObj.setWeight(product.getWeight());
			productObj.setWidth(product.getWidth());
			productObj.setProductId(product.getProductId());				
			productObj.setNormalPrice(product.getNormalPrice());
			productObj.setPurchasePrice(product.getPurchasePrice());			
			productObj.setDoctorPrice(product.getDoctorPrice());
			productObj.setSalesrepPrice(product.getSalesrepPrice());
			productObj.setQuantityonalert(product.getQuantityonalert());
			
			//productObj.setSupplierId(product.getSupplier().getSupplierId());
		//	productObj.setSupplierName(product.getSupplier().getSupplierName());
			productObj.setCategoryId(product.getProductcategory().getCategoryId());
			productObj.setCategoryName(product.getProductcategory().getName());	
			productObj.setUom(product.getUom());
			productObj.setProductDesc(product.getProductDesc());
		/*	for(Productsupplier supplier : product.getProductsuppliers())
			{
				ProductsupplierModel supplierObj = new ProductsupplierModel();	
				supplierObj.setSupplierId(supplier.getSupplier().getSupplierId());
				supplierObj.setSupplierName(supplier.getSupplier().getSupplierName());
				supplierObj.setSupplierAddress(supplier.getSupplier().getAddress());
				supplierObj.setProductId(product.getProductId());
				supplierObj.setProductName(product.getProductName());
				
				supplierList.add(supplierObj);
			}
			productObj.setSupplierlist(supplierList);	*/
			productObjList.add(productObj);
		}
		}
		catch(Exception e)
		{
			log.info("Error in getProductList of ProductBOImpl "+ e.toString());
			throw e;
		}
		return productObjList;
	}

	@Override
	public List<ProductModel> getProductListUsingLikeProductCode(
			String productCode) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ProductModel getProductDetails(int productId) throws Exception {
		ProductModel productObj = new ProductModel();	
		List<ProductsupplierModel> supplierList = new ArrayList<ProductsupplierModel>();

		try {			
			Product product = productRepository.getProductDetails(productId);
			
			productObj.setBarcode(product.getBarcode());
			productObj.setBaroldcode(product.getBarcode());
			productObj.setCreatedBy(product.getCreatedBy());
			productObj.setCreatedDate(product.getCreatedDate());
			productObj.setDescription(product.getDescription());
			productObj.setDiscount(product.getDiscount());
			productObj.setExpiryDate(product.getCreatedDate());
			productObj.setHeight(product.getHeight());
			productObj.setLastModifiedDate(product.getLastModifiedDate());
			productObj.setLength(product.getLength());
			productObj.setProductCode(product.getProductCode());
			productObj.setProductName(product.getProductName());
			productObj.setQuantityonHand(product.getQuantityonHand());
			productObj.setReorderPoint(product.getReorderPoint());
			productObj.setReorderQuantity(product.getReorderQuantity());
			productObj.setStatus(product.getStatus());
			productObj.setWeight(product.getWeight());
			productObj.setWidth(product.getWidth());
			productObj.setProductId(product.getProductId());				
			productObj.setNormalPrice(product.getNormalPrice());
			productObj.setPurchasePrice(product.getPurchasePrice());
			
			productObj.setDoctorPrice(product.getDoctorPrice());
			productObj.setSalesrepPrice(product.getSalesrepPrice());
			productObj.setQuantityonalert(product.getQuantityonalert());
			
			
			//productObj.setSupplierId(product.getSupplier().getSupplierId());
			//productObj.setSupplierName(product.getSupplier().getSupplierName());
			productObj.setCategoryId(product.getProductcategory().getCategoryId());
			productObj.setCategoryName(product.getProductcategory().getName());				
			productObj.setUom(product.getUom());
			productObj.setProductDesc(product.getProductDesc());
			
			for(Productsupplier supplier : product.getProductsuppliers())
			{
				ProductsupplierModel supplierObj = new ProductsupplierModel();	
				supplierObj.setProductsupplierId(supplier.getProductsupplierId());
				supplierObj.setSupplierId(supplier.getSupplier().getSupplierId());
				supplierObj.setSupplierName(supplier.getSupplier().getSupplierName());
				supplierObj.setSupplierAddress(supplier.getSupplier().getAddress());
				supplierObj.setProductId(product.getProductId());
				supplierObj.setProductName(product.getProductName());
				
				supplierList.add(supplierObj);
			}
			productObj.setSupplierlist(supplierList);	
			
			
		}
		catch (Exception e) {
			log.info("Error in getProductDetailsByBarcode ProductBOImpl " + e);
			throw e;
		}
		return productObj;
	}
	
	
	@Override
	public ProductModel getProductPriceDetails(int productId) throws Exception {
		ProductModel productObj = new ProductModel();	
		List<ProductpriceModel> priceList = new ArrayList<ProductpriceModel>();
		
		try {			
			Product product = productRepository.getProductPriceDetails(productId);
			
			productObj.setBarcode(product.getBarcode());
			productObj.setBaroldcode(product.getBarcode());
			productObj.setCreatedBy(product.getCreatedBy());
			productObj.setCreatedDate(product.getCreatedDate());
			productObj.setDescription(product.getDescription());
			productObj.setDiscount(product.getDiscount());
			productObj.setExpiryDate(product.getCreatedDate());
			productObj.setHeight(product.getHeight());
			productObj.setLastModifiedDate(product.getLastModifiedDate());
			productObj.setLength(product.getLength());
			productObj.setProductCode(product.getProductCode());
			productObj.setProductName(product.getProductName());
			productObj.setQuantityonHand(product.getQuantityonHand());
			productObj.setReorderPoint(product.getReorderPoint());
			productObj.setReorderQuantity(product.getReorderQuantity());
			productObj.setStatus(product.getStatus());
			productObj.setWeight(product.getWeight());
			productObj.setWidth(product.getWidth());
			productObj.setProductId(product.getProductId());				
			productObj.setNormalPrice(product.getNormalPrice());
			productObj.setPurchasePrice(product.getPurchasePrice());					
			productObj.setUom(product.getUom());
			productObj.setProductDesc(product.getProductDesc());
			productObj.setDoctorPrice(product.getDoctorPrice());
			productObj.setSalesrepPrice(product.getSalesrepPrice());
			productObj.setQuantityonalert(product.getQuantityonalert());
			
			
			for (Productprice price : product.getProductprices()) {				
				
				ProductpriceModel priceObj = new ProductpriceModel();	
				priceObj.setBarCode(price.getBarCode());
				priceObj.setDiscountAmount(price.getDiscountAmount());
				priceObj.setProductName(price.getProduct().getProductName());
				priceObj.setProductId(price.getProduct().getProductId());
				priceObj.setQuantityFrom(price.getQuantityFrom());
				//priceObj.setQuantityTo(price.getQuantityTo());
				priceObj.setUom(price.getProduct().getUom());	
				priceObj.setProductPriceId(price.getProductPriceId());
				priceList.add(priceObj);			
			}	
			
			productObj.setPriceList(priceList);
		}
		catch (Exception e) {
			log.info("Error in getProductPriceDetails ProductBOImpl " + e);
			throw e;
		}
		return productObj;
	}

	
	

	@Transactional
	@Override
	public boolean createNewProduct(ProductModel product) throws Exception {
		boolean saveSuccess = false;
		Product productObj = new Product();
		List<Productsupplier> supplierList = new ArrayList<Productsupplier>();
		try {
			
			productObj.setBarcode(product.getBarcode());
			productObj.setCreatedBy(product.getCreatedBy());
			productObj.setCreatedDate(product.getCreatedDate());
			productObj.setDescription(product.getDescription());
			productObj.setDiscount(product.getDiscount());
			productObj.setExpiryDate(product.getCreatedDate());
			productObj.setHeight(product.getHeight());
			productObj.setLastModifiedDate(product.getLastModifiedDate());
			productObj.setLength(product.getLength());
			productObj.setProductCode(product.getProductCode());
			productObj.setProductName(product.getProductName());
			productObj.setQuantityonHand(product.getQuantityonHand());
			productObj.setReorderPoint(product.getReorderPoint());
			productObj.setReorderQuantity(product.getReorderQuantity());
			productObj.setStatus(product.getStatus());
			productObj.setWeight(product.getWeight());
			productObj.setWidth(product.getWidth());
			productObj.setNormalPrice(product.getNormalPrice());
			productObj.setPurchasePrice(product.getPurchasePrice());
			productObj.setUom(product.getUom());
			productObj.setProductDesc(product.getProductDesc());
			productObj.setDoctorPrice(product.getDoctorPrice());
			productObj.setSalesrepPrice(product.getSalesrepPrice());
			productObj.setQuantityonalert(product.getQuantityonalert());
			
			for(ProductsupplierModel supplier : product.getSupplierlist())
			{
				Productsupplier supplierObj = new Productsupplier();	
				Supplier supplier1 = new Supplier();
				supplier1.setSupplierId(supplier.getSupplierId());				
				supplierObj.setProduct(productObj);
				supplierObj.setSupplier(supplier1);
				
				supplierList.add(supplierObj);
			}
			productObj.setProductsuppliers(supplierList);
			
			
			Productcategory productcategory = new Productcategory();
			productcategory.setCategoryId(product.getCategoryId());
			productObj.setProductcategory(productcategory);			
			
			saveSuccess =productRepository.createNewProduct(productObj);
		}

		catch (Exception e) {
			log.info("Error in createNewProduct ProductBOImpl " + e);
			throw e;
		}
		return saveSuccess;
	
	}

	@Transactional
	@Override
	public boolean updateProduct(ProductModel product) throws Exception {
		boolean updateSuccess = false;
		Product productObj = productRepository.getProductDetails(product.getProductId());
		List<Productsupplier> supplierList = new ArrayList<Productsupplier>();
		List<Integer> supplierIds = new  ArrayList<Integer>();
		try {
			
			productObj.setBarcode(product.getBarcode());
			
			productObj.setCreatedBy(product.getCreatedBy());
			productObj.setCreatedDate(product.getCreatedDate());
			productObj.setDescription(product.getDescription());
			productObj.setDiscount(product.getDiscount());
			productObj.setExpiryDate(product.getCreatedDate());
			productObj.setHeight(product.getHeight());
			productObj.setLastModifiedDate(product.getLastModifiedDate());
			productObj.setLength(product.getLength());
			productObj.setProductCode(product.getProductCode());
			productObj.setProductName(product.getProductName());
			productObj.setQuantityonHand(product.getQuantityonHand());
			productObj.setReorderPoint(product.getReorderPoint());
			productObj.setReorderQuantity(product.getReorderQuantity());
			productObj.setStatus(product.getStatus());
			productObj.setWeight(product.getWeight());
			productObj.setWidth(product.getWidth());
			productObj.setNormalPrice(product.getNormalPrice());
			productObj.setPurchasePrice(product.getPurchasePrice());
			productObj.setUom(product.getUom());
			productObj.setProductDesc(product.getProductDesc());
			productObj.setDoctorPrice(product.getDoctorPrice());
			productObj.setSalesrepPrice(product.getSalesrepPrice());
			productObj.setQuantityonalert(product.getQuantityonalert());
			
			
			
			for(Productsupplier newSupplier : productObj.getProductsuppliers()){
				supplierIds.add(newSupplier.getProductsupplierId());
			}			
			for (ProductsupplierModel oldSupplier : product.getSupplierlist()) {								 
				
				if(supplierIds.contains(oldSupplier.getProductsupplierId()))
				{	
					for(Productsupplier newSupplier1 : productObj.getProductsuppliers()){
						if(newSupplier1.getProductsupplierId()==oldSupplier.getProductsupplierId())
						{									
							supplierList.add(newSupplier1);
						}
					}					
				}
				else
				{									
					Productsupplier supplierObj = new Productsupplier();	
					Supplier supplier1 = new Supplier();
					supplier1.setSupplierId(oldSupplier.getSupplierId());				
					supplierObj.setProduct(productObj);
					supplierObj.setSupplier(supplier1);					
					supplierList.add(supplierObj);
					
				}
			} 
			productObj.setProductsuppliers(supplierList);		
			
			Productcategory productcategory = new Productcategory();
			productcategory.setCategoryId(product.getCategoryId());
			productObj.setProductcategory(productcategory);			
			
			updateSuccess =productRepository.updateProduct(productObj);
		}

		catch (Exception e) {
			log.info("Error in updateProduct ProductBOImpl " + e);
			throw e;
		}
		return updateSuccess;
	
	}

	@Transactional
	@Override
	public boolean deleteProduct(ProductModel product) throws Exception {
		boolean deleteSuccess = false;
		
		try {
			Product productObj = productRepository.getProductDetails(product.getProductId());			
			deleteSuccess = productRepository.deleteProduct(productObj);			
			}
		catch (Exception e) {
			log.info("Error in deleteProduct ProductBOImpl " + e);
			throw e;
		}
		return deleteSuccess;
	}

	@Override
	public ProductModel getProductDetailsByBarcode(String barcode)
			throws Exception {
		    ProductModel productObj = new ProductModel();	
			List<ProductsupplierModel> supplierList = new ArrayList<ProductsupplierModel>();

			try {			
				Product product = productRepository.getProductDetailsByBarcode(barcode);
				
				productObj.setBarcode(product.getBarcode());
				productObj.setBaroldcode(product.getBarcode());
				productObj.setCreatedBy(product.getCreatedBy());
				productObj.setCreatedDate(product.getCreatedDate());
				productObj.setDescription(product.getDescription());
				productObj.setDiscount(product.getDiscount());
				productObj.setExpiryDate(product.getCreatedDate());
				productObj.setHeight(product.getHeight());
				productObj.setLastModifiedDate(product.getLastModifiedDate());
				productObj.setLength(product.getLength());
				productObj.setProductCode(product.getProductCode());
				productObj.setProductName(product.getProductName());
				productObj.setQuantityonHand(product.getQuantityonHand());
				productObj.setReorderPoint(product.getReorderPoint());
				productObj.setReorderQuantity(product.getReorderQuantity());
				productObj.setStatus(product.getStatus());
				productObj.setWeight(product.getWeight());
				productObj.setWidth(product.getWidth());
				productObj.setProductId(product.getProductId());				
				productObj.setNormalPrice(product.getNormalPrice());
				productObj.setPurchasePrice(product.getPurchasePrice());
				productObj.setProductDesc(product.getProductDesc());
				//productObj.setSupplierId(product.getSupplier().getSupplierId());
				//productObj.setSupplierName(product.getSupplier().getSupplierName());
				productObj.setCategoryId(product.getProductcategory().getCategoryId());
				productObj.setCategoryName(product.getProductcategory().getName());				
				productObj.setUom(product.getUom());
				productObj.setDoctorPrice(product.getDoctorPrice());
				productObj.setSalesrepPrice(product.getSalesrepPrice());
				productObj.setQuantityonalert(product.getQuantityonalert());
				
				for(Productsupplier supplier : product.getProductsuppliers())
				{
					ProductsupplierModel supplierObj = new ProductsupplierModel();	
					supplierObj.setSupplierId(supplier.getSupplier().getSupplierId());
					supplierObj.setSupplierName(supplier.getSupplier().getSupplierName());
					supplierObj.setSupplierAddress(supplier.getSupplier().getAddress());
					supplierObj.setProductId(product.getProductId());
					supplierObj.setProductName(product.getProductName());				
					supplierList.add(supplierObj);
				}
				productObj.setSupplierlist(supplierList);	
				
			}
			catch (Exception e) {
				log.info("Error in getProductDetailsByBarcode ProductBOImpl " + e);
				throw e;
			}
			return productObj;
	}

	@Override
	public boolean findProductExites(String product) throws Exception {
		boolean exists = false;		
		try {
			exists = productRepository.findProductExites(product);
		}
		catch (Exception e) {
			log.info("Error in findProductExites ProductBOImpl " + e);
			throw e;
		}
		return exists;	
	}

	@Override
	public boolean findbarcodeExites(String barcode) throws Exception {
		boolean exists = false;		
		try {
			exists = productRepository.findbarcodeExites(barcode);
		}
		catch (Exception e) {
			log.info("Error in findbarcodeExites ProductBOImpl " + e);
			throw e;
		}
		return exists;	
	}

	@Override
	public List<ProductModel> getProductList(String barcode) throws Exception {
		List<ProductModel> productObjList = new ArrayList<ProductModel>();
		try {
		List<Product> productList = productRepository.getProductList(barcode);

		for (Product product : productList) {
			
			ProductModel productObj = new ProductModel();
			productObj.setBarcode(product.getBarcode());
			productObj.setCreatedBy(product.getCreatedBy());
			productObj.setCreatedDate(product.getCreatedDate());
			productObj.setDescription(product.getDescription());
			productObj.setDiscount(product.getDiscount());
			productObj.setExpiryDate(product.getCreatedDate());
			productObj.setHeight(product.getHeight());
			productObj.setLastModifiedDate(product.getLastModifiedDate());
			productObj.setLength(product.getLength());
			productObj.setProductCode(product.getProductCode());
			productObj.setProductName(product.getProductName());
			productObj.setQuantityonHand(product.getQuantityonHand());
			productObj.setReorderPoint(product.getReorderPoint());
			productObj.setReorderQuantity(product.getReorderQuantity());
			productObj.setStatus(product.getStatus());
			productObj.setWeight(product.getWeight());
			productObj.setWidth(product.getWidth());
			productObj.setProductId(product.getProductId());				
			productObj.setNormalPrice(product.getNormalPrice());
			productObj.setPurchasePrice(product.getPurchasePrice());				
			productObj.setUom(product.getUom());
			productObj.setProductDesc(product.getProductDesc());
			productObj.setDoctorPrice(product.getDoctorPrice());
			productObj.setSalesrepPrice(product.getSalesrepPrice());
			productObj.setQuantityonalert(product.getQuantityonalert());
			
			productObjList.add(productObj);
		}
		}
		catch(Exception e)
		{
			log.info("Error in getProductList By barcode of ProductBOImpl "+ e.toString());
			throw e;
		}
		return productObjList;
	}

	@Override
	public List<ProductsupplierModel> getProductSuppliersByBarcode(String barcode)
			throws Exception {
		
		List<ProductsupplierModel> supplierList = new ArrayList<ProductsupplierModel>();
		ProductModel productObj = new ProductModel();
		try {			
			List<Productsupplier> productList = productRepository.getProductSuppliersByBarcode(barcode);
			
			for (Productsupplier supplier : productList) {				
		
				ProductsupplierModel supplierObj = new ProductsupplierModel();	
				supplierObj.setSupplierId(supplier.getSupplier().getSupplierId());
				supplierObj.setSupplierName(supplier.getSupplier().getCompanyName());
				supplierObj.setSupplierAddress(supplier.getSupplier().getAddress());
				supplierObj.setProductId(supplier.getProduct().getProductId());
				supplierObj.setProductName(supplier.getProduct().getProductName());
				
				supplierList.add(supplierObj);
			
			}
			
		}
		catch (Exception e) {
			log.info("Error in getProductDetailsByBarcode ProductBOImpl " + e);
			throw e;
		}
		return supplierList;
	}

	@Override
	public List<ProductpriceModel> getProductpriceByBarcode(String barcode)
			throws Exception {
		List<ProductpriceModel> priceListObj = new ArrayList<ProductpriceModel>();
		ProductpriceModel priceObj = new ProductpriceModel();
		try {			
			List<Productprice> priceList = productRepository.getProductpriceByBarcode(barcode);
			
			for (Productprice price : priceList) {				
		
				priceObj = new ProductpriceModel();	
				priceObj.setBarCode(price.getBarCode());
				priceObj.setDiscountAmount(price.getDiscountAmount());
				priceObj.setProductName(price.getProduct().getProductName());
				priceObj.setProductId(price.getProduct().getProductId());
				priceObj.setQuantityFrom(price.getQuantityFrom());
				//priceObj.setQuantityTo(price.getQuantityTo());
				priceObj.setUom(price.getProduct().getUom());	
				priceObj.setProductPriceId(price.getProductPriceId());
				priceListObj.add(priceObj);			
			}
			
		}
		catch (Exception e) {
			log.info("Error in getProductpriceByBarcode ProductBOImpl " + e);
			throw e;
		}
		return priceListObj;
	}

	
	
	
	@Transactional
	@Override
	public boolean deleteProductPrice(ProductpriceModel productprice)
			throws Exception {
		boolean deleteSuccess = false;		
		try {			
			Productprice productpriceObj= new Productprice();
			productpriceObj=productRepository.getProductPriceDetailsbyId(productprice.getProductPriceId());
			deleteSuccess = productRepository.deleteProductPrice(productpriceObj);			
			}
		catch (Exception e) {
			log.info("Error in deleteProductPrice ProductBOImpl " + e);
			throw e;
		}
		return deleteSuccess;
	}
	
	
	@Transactional
	@Override
	public boolean deleteProductsupplier(ProductsupplierModel productsupplier)
			throws Exception {
		boolean deleteSuccess = false;		
		try {			
			Productsupplier productsupplierObj= new Productsupplier();
			productsupplierObj=productRepository.getProductSupplierDetailsbyId(productsupplier.getProductsupplierId());
			deleteSuccess = productRepository.deleteProductsupplier(productsupplierObj);			
			}
		catch (Exception e) {
			log.info("Error in deleteProductsupplier ProductBOImpl " + e);
			throw e;
		}
		return deleteSuccess;
	}
	
	
	
	@Transactional
	@Override
	public boolean updateProductPrice(Integer productId,List<ProductpriceModel> oldproductPriceList,List<ProductpriceModel> newproductPriceList)
			throws Exception {
		
		boolean updateSuccess = false;	
		boolean priceRemoved = true;
		List<Productprice> newPriceList  = new ArrayList<Productprice>(); 
		List<Integer> priceId = new  ArrayList<Integer>();
		try {			
			Product p = productRepository.getProductPriceDetails(productId);				
			
			for(Productprice newPrice : p.getProductprices()){
				priceId.add(newPrice.getProductPriceId());
			}
			
			for (ProductpriceModel oldPrice : newproductPriceList) {								 
				
				Productprice newPrice=new Productprice();
				
				if(priceId.contains(oldPrice.getProductPriceId()))
				{	
					for(Productprice newPrice1 : p.getProductprices()){
						if(newPrice1.getProductPriceId()==oldPrice.getProductPriceId())
						{							
							newPrice1.setDiscountAmount(oldPrice.getDiscountAmount());					
							newPrice1.setQuantityFrom(oldPrice.getQuantityFrom());							
							newPrice1.setCreatedBy(oldPrice.getCreatedBy());
							newPrice1.setLastModifiedDate(new Date());							
							newPriceList.add(newPrice1);
						}
					}
					
				}
				else
				{									
					newPrice.setDiscountAmount(oldPrice.getDiscountAmount());					
					newPrice.setQuantityFrom(oldPrice.getQuantityFrom());					
					newPrice.setUom(oldPrice.getUom());	
					newPrice.setCreatedBy(oldPrice.getCreatedBy());
					newPrice.setLastModifiedDate(new Date());
					newPrice.setBarCode(oldPrice.getBarCode());
					newPrice.setTotalQuantity(0);
					newPrice.setProduct(p);
					newPriceList.add(newPrice);
				}
			} 
			p.setProductprices(newPriceList);
			updateSuccess=productRepository.updateProduct(p);	
			 
				
			 
			}
		catch (Exception e) {
			log.info("Error in updateProductPrice ProductBOImpl " + e);
			throw e;
		}
		return updateSuccess;
	}

	
	

}
